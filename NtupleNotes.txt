#Ntuple code runs over miniAOD and produces ROOT ntuples
# The Ntuple code is checked into a separate git repository at the moment
# I check out to a seperate directory and move it into CMSSW

git clone /opt/ppd/scratch/olaiya/repo/git/NTupler.git

#mv the package into your CMS release eg.
mv NTupler /opt/ppd/scratch/olaiya/CMS/analysis/CMSSW_7_2_0/src/
#setup environment
cmsenv
#check out HEEP package
git cms-merge-topic Sam-Harper:HEEPID72X
#build it
scramv1 b -j 8
#change into ntuple directory
cd NTupler/PATNTupler/plugins
#If you want to run the ntuple code directly edit nTupleProduction.py to specify the file you want to run over
#Alternatively if you want to run a crab production edit the crab config file crabConfig_nTupleProd.py to run over the dataset and specify the output directory on the T2 where you want the ntuple to be written. Then submit
source /cvmfs/cms.cern.ch/crab3/crab.csh
crab submit -c crabConfig_nTupleProd.py
#check the status
crab status crab_projects/crab_RAL_nTuple_production --long


Running over the Ntuples
========================
#To run over the ntuples go into the main directory where there is an example of running over the ntuples. Go into this directory and compile the code.

cd NTupler/PATNTupler/main
gmake

#The code main.cc gives examples of how you can access the variables in the ntuple.
#To run over a list of file execute the command
./run test.list
# the file test.list contains the list of root files to run over.
cat test.list          
../plugins/nTuple.root
#main.cc has two examples of accessing root file. So a ROOT file is explicitly stated in the code. Make sure this file exists or chaneg the name to a file that does


